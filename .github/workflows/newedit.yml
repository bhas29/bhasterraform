name: black

on:
  pull_request:
    paths:
      - '**/*.tf'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-changed-files:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch enough history for comparison

      # Step 2: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Step 3: Install TFLint
      - name: Install TFLint
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # Step 4: Install Checkov
      - name: Install Checkov
        run: |
          pip install checkov

      # Step 5: Install GitHub CLI (for posting comments)
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      # Step 6: Find changed Terraform files
      - name: Find changed .tf files
        id: changed-files
        run: |
          echo "Checking for changed .tf files..."
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main | grep '\.tf$' || true)
          CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')  # Convert newlines to spaces
          echo "files=$CHANGED_FILES" >> $GITHUB_ENV
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Terraform files changed."
            exit 0
          else
            echo "Terraform files changed:"
            echo "$CHANGED_FILES"
          fi

      # Step 7: Run terraform fmt on changed files
      - name: Run terraform fmt
        run: |
          PR_COMMENT="### Terraform FMT Results"$'\n'
          for file in ${{ env.files }}; do
            echo "Running terraform fmt on $file..."
            FMT_OUTPUT=$(terraform fmt -check -diff "$file")
            if [ $? -eq 0 ]; then
              PR_COMMENT+="* ✅ No formatting issues found in \`$file\`\n"
            else
              PR_COMMENT+="* ❌ Formatting issues found in \`$file\`:\n\`\`\`\n$FMT_OUTPUT\n\`\`\`\n"
            fi
          done
          echo "PR_COMMENT<<EOF" >> $GITHUB_ENV
          echo -e "$PR_COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 8: Run Checkov on changed files
      - name: Run Checkov
        run: |
          PR_COMMENT="${{ env.PR_COMMENT }}\n### Checkov Results"$'\n'
          for file in ${{ env.files }}; do
            echo "Running checkov on $file..."
            CHECKOV_OUTPUT=$(checkov -f "$file" 2>&1)
            if [ $? -eq 0 ]; then
              PR_COMMENT+="* ✅ No security issues found in \`$file\`\n"
            else
              PR_COMMENT+="* ❌ Security issues found in \`$file\`:\n\`\`\`\n$CHECKOV_OUTPUT\n\`\`\`\n"
            fi
          done
          echo "PR_COMMENT<<EOF" >> $GITHUB_ENV
          echo -e "$PR_COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Step 9: Run TFLint on changed files
      - name: Run TFLint
        run: |
          PR_COMMENT="${{ env.PR_COMMENT }}\n### TFLint Results"$'\n'
          for file in ${{ env.files }}; do
            echo "Running tflint on $file..."
            dir=$(dirname "$file")
            TFLINT_OUTPUT=$(tflint --chdir="$dir" 2>&1)
            if [ $? -eq 0 ]; then
              PR_COMMENT+="* ✅ No lint issues found in \`$file\`\n"
            else
              PR_COMMENT+="* ❌ Lint issues found in \`$file\`:\n\`\`\`\n$TFLINT_OUTPUT\n\`\`\`\n"
            fi
          done
          echo "PR_COMMENT<<EOF" >> $GITHUB_ENV
          echo -e "$PR_COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        continue-on-error: true

      # Step 10: Post Results as PR Comment
      - name: Post PR Comment
        run: |
          PR_NUMBER=$(echo "${{ github.event.pull_request.number }}")
          gh pr comment $PR_NUMBER --body "${{ env.PR_COMMENT }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
