name: newedit1

on:
  pull_request:
    paths:
      - '**/*.tf'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-changed-files:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch enough history for comparison

      # Step 2: Find changed Terraform files
      - name: Find changed .tf files
        id: changed-files
        run: |
          echo "Checking for changed .tf files..."
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main | grep '\.tf$' || true)
          echo "Changed files: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Terraform files changed."
            exit 0
          else
            echo "Terraform files changed:"
            echo "$CHANGED_FILES"
            # Set output to make changed files available in subsequent steps
            echo "::set-output name=files::$CHANGED_FILES"
          fi

      # Step 3: Set up Python (required for Checkov)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install Checkov
      - name: Install Checkov
        run: pip install checkov

      # Step 5: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Step 6: Install TFLint
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # Step 7: Run Terraform fmt
      - name: Run Terraform fmt
        if: steps.changed-files.outputs.files != ''
        run: |
          fmt_results=""
          for file in ${{ steps.changed-files.outputs.files }}; do
            echo "Running Terraform fmt on $file"
            output=$(terraform fmt -check -diff "$file" 2>&1)

            if [[ $? -eq 0 ]]; then
              fmt_results+="✅ Found no format issue on $file\n"
            else
              fmt_results+="❌ Formatting issues found in $file:\n$output\n"
            fi
          done

          if [[ -z "$fmt_results" ]]; then
            fmt_results="✅ No format issues found in any changed file."
          fi

          echo -e "$fmt_results" > fmt_results.txt

      # Step 8: Run TFLint on changed files
      - name: Run TFLint on changed files
        if: steps.changed-files.outputs.files != ''
        continue-on-error: true
        run: |
          tflint_results=""
          has_issues=false  # Flag to track if any issues are found

          for file in ${{ steps.changed-files.outputs.files }}; do
            echo "Running TFLint on $file"
            output=$(tflint "$file" 2>&1)

            if [[ $? -eq 0 ]]; then
              tflint_results+="✅ Found no lint issue on $file\n"
            else
              tflint_results+="❌ Lint issues found in $file:\n$output\n"
              has_issues=true  # Set the flag to true if issues are found
            fi
          done

          if [[ -z "$tflint_results" ]]; then
            tflint_results="✅ No lint issues found in any changed file."
          fi

          echo -e "$tflint_results" > tflint_results.txt

          # Optionally, you can log the results
          echo "$tflint_results"

          # If you want to fail the job based on the flag, you can uncomment the following line
          # if [ "$has_issues" = true ]; then exit 1; fi

      # Step 9: Run Checkov scan on changed .tf files and save results
      - name: Run Checkov on changed files
        if: steps.changed-files.outputs.files != ''
        run: |
          echo "" > checkov_results.txt  # Initialize empty results file
          for file in ${{ steps.changed-files.outputs.files }}; do
            echo "Running Checkov on $file"
            checkov -f $file --output cli >> checkov_results.txt || echo "WARNING: Checkov scan failed for $file (ignorable warning)"
          done

      # Step 10: Combine results
      - name: Combine results
        run: |
          echo "### Terraform Fmt Results" > combined_results.txt
          cat fmt_results.txt >> combined_results.txt
          echo -e "\n### TFLint Results" >> combined_results.txt
          cat tflint_results.txt >> combined_results.txt
          echo -e "\n### Checkov Results" >> combined_results.txt
          cat checkov_results.txt >> combined_results.txt

      # Step 11: Post Check Results as PR comment
      - name: Post Check Results as PR comment
        if: steps.changed-files.outputs.files != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output '.[0].number' <<< "$(gh pr list --json number --state open --limit 1)")
          gh pr comment $PR_NUMBER --body "$(cat combined_results.txt)" ```yaml
