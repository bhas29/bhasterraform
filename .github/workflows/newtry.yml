name: full with customized PR comments

on:
  pull_request:
    paths:
      - '**/*.tf'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-changed-files:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch enough history for comparison

      # Step 2: Find changed Terraform files
      - name: Find changed .tf files
        id: changed-files
        run: |
          echo "Checking for changed .tf files..."
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main | grep '\.tf$' || true)
          echo "Changed files: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Terraform files changed."
            exit 0
          else
            echo "Terraform files changed:"
            echo "$CHANGED_FILES"
            echo "::set-output name=files::$CHANGED_FILES"
          fi

      # Step 3: Set up Python (required for Checkov)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install Checkov
      - name: Install Checkov
        run: pip install checkov

      # Step 5: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Step 6: Install TFLint
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # Step 7: Run Terraform fmt on changed files and save results
      - name: Run Terraform fmt
        if: success() && steps.changed-files.outputs.files != ''
        run: |
          for file in ${{ steps.changed-files.outputs.files }}; do
            echo "Running Terraform fmt on $file"
            terraform fmt -check -diff $file >> fmt_results.txt 2>&1
            if [ $? -eq 0 ]; then
              echo "Terraform fmt check successful for $file" >> fmt_results.txt
            else
              echo "ERROR: Terraform fmt check failed for $file" >> fmt_results.txt
            fi
          done

      # Step 8: Run TFLint on changed files and save results
      - name: Run TFLint on changed files
        if: success() && steps.changed-files.outputs.files != ''
        run: |
          for file in ${{ steps.changed-files.outputs.files }}; do
            echo "Running TFLint on $file"
            tflint $file >> tflint_results.txt 2>&1
            if [ $? -eq 0 ]; then
              echo "TFLint check successful for $file" >> tflint_results.txt
            else
              echo "ERROR: TFLint issues found in $file" >> tflint_results.txt
            fi
          done

      # Step 9: Run Checkov scan on changed .tf files and save results
      - name: Run Checkov on changed files
        if: success() && steps.changed-files.outputs.files != ''
        run: |
          echo "" > checkov_results.txt
          for file in ${{ steps.changed-files.outputs.files }}; do
            echo "Running Checkov on $file"
            checkov -f $file --output cli >> checkov_results.txt 2>&1
            if [ $? -eq 0 ]; then
              echo "Checkov scan completed successfully for $file" >> checkov_results.txt
            else
              echo "ERROR: Checkov scan failed for $file" >> checkov_results.txt
            fi
          done

      # Step 10: Combine all results into one file
      - name: Combine results
        if: success()
        run: |
          echo "### Terraform Fmt Results" > combined_results.txt
          cat fmt_results.txt >> combined_results.txt
          echo "\n### TFLint Results" >> combined_results.txt
          cat tflint_results.txt >> combined_results.txt
          echo "\n### Checkov Results" >> combined_results.txt
          cat checkov_results.txt >> combined_results.txt

      # Step 11: Post results as PR comment
      - name: Post Check Results as PR comment
        if: success() && steps.changed-files.outputs.files != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output '.[0].number' <<< "$(gh pr list --json number --state open --limit 1)")
          gh pr comment $PR_NUMBER --body "$(cat combined_results.txt)"

      # Step 12: Post success message in PR comment
      - name: Post success message
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output '.[0].number' <<< "$(gh pr list --json number --state open --limit 1)")
          gh pr comment $PR_NUMBER --body "All tests successful, good to go! ðŸŽ‰"
